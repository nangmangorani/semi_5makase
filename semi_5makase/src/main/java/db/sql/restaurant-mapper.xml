<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

	<entry key="increaseRestaurantView">
		UPDATE RESTAURANT
		   SET REST_VIEWS = REST_VIEWS + 1
		 WHERE REST_NO = ?
	</entry>

	<entry key="selectRestaurantDetail">
		SELECT 
		       REST_NO
		     , REST_NAME
		     , REST_ADDRESS
		     , REST_PHONE
		     , PARKING
		     , INTRO
		     , REST_VIEWS
		     , OPENING_TIME
		     , REST_TIME
		     , BREAK_TIME
		  FROM RESTAURANT
		  JOIN OPEN_TIME USING (REST_NO)
		 WHERE REST_NO = ?
	</entry>
	
	<entry key="selectMainTvRestInfo">
		SELECT REST_NAME, ADDRESS, TV_NAME, CATEGORY_NAME, ROUND(AVG(RATING),1) "AVG"
		  FROM (
		  SELECT 
		       CATEGORY_NAME
		     , TV_NAME
		     , REST_NAME
		     , SUBSTR(REST_ADDRESS, 1, INSTR(REST_ADDRESS, '구')) "ADDRESS"
		     , RATING
		  FROM RESTAURANT
		  JOIN FOOD_CATEGORY USING (CATEGORY_NO)
		  JOIN TV USING (TV_NO)
		  JOIN REVIEW USING (REST_NO)
		 WHERE TV_NO IS NOT NULL
		  ) E
		GROUP BY CATEGORY_NAME, TV_NAME, REST_NAME, ADDRESS
	</entry>
	
	<entry key="selectMenuList">
		SELECT 
		       REST_NO
		     , FILE_NO
		     , MENU
		     , TO_CHAR(PRICE, 'FM99,999') PRICE
		     , MENU_GRADE
		  FROM MENU
		 WHERE REST_NO = ?
	</entry>
	
	<entry key="selectFavoriteCount">
		SELECT 
		       COUNT(*) count
		  FROM FAVORITES
		 WHERE REST_NO = ?
	</entry>
	
	<entry key="selectReviewCount">
		SELECT 
		       COUNT(*) count
		  FROM REVIEW
		 WHERE REST_NO = ?
	</entry>
	
	<entry key="selectLikesCount">
		SELECT 
		       COUNT(*) count
          FROM REVIEW_UP
         WHERE REVIEW_NO = ?
	</entry>
	
	<entry key="selectReviewRatingAvg">
		SELECT AVG(RATING) avg
		  FROM REVIEW
		  JOIN RESTAURANT USING (REST_NO)
		 WHERE REST_NO = ?
	</entry>
	
	<!-- 안쓸예정  -->
	<entry key="updateRestaurant1111111111">
		UPDATE RESTAURANT
		   SET CATEGORY_NO = (SELECT CATEGORY_NO FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , TV = (SELECT TV FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , REST_NAME = (SELECT REST_NAME FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , REST_ADDRESS = (SELECT REST_ADDRESS FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , REST_PHONE = (SELECT REST_PHONE FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , PARKING = (SELECT PARKING FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , INTRO = (SELECT INTRO FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		     , REST_VIEWS = (SELECT REST_VIEWS FROM RESTAURANTUPDATE WHERE REST_NO = ?)
		 WHERE REST_NO = ?  
	</entry>
	
	<entry key="checkFavorite">
		SELECT COUNT(*) COUNT
		  FROM FAVORITES
		  JOIN MEMBER USING (MEM_NO)
		  JOIN RESTAURANT USING (REST_NO)
		 WHERE MEM_NO = ?
		   AND REST_NO = ?
	</entry>
	
	<entry key="checkLikes">
		SELECT COUNT(*) COUNT
		  FROM REVIEW_UP R
          JOIN REVIEW USING (REVIEW_NO)
          JOIN MEMBER M ON (R.MEM_NO = M.MEM_NO) 
		 WHERE M.MEM_NO = ?
		   AND REVIEW_NO = ?
	</entry>
	
	
	<entry key="deleteFavoriteRestaurant">
		DELETE
		  FROM FAVORITES
		 WHERE MEM_NO = ?
		   AND REST_NO = ?
	</entry>
	
	<entry key="deleteLikes">
		DELETE
		  FROM REVIEW_UP
		 WHERE MEM_NO = ?
		   AND REVIEW_NO = ?
	</entry>
	
	<entry key="insertFavoriteRestaurant">
		INSERT
		  INTO FAVORITES
		  (
		    MEM_NO
		  , REST_NO 
		  )
		VALUES
		  (
		    ?
		  , ?  
		  )
	</entry>
	
	<entry key="insertLikes">
		INSERT
	      INTO REVIEW_UP
	      (
	        MEM_NO
	      , REVIEW_NO 
	      )
	    VALUES
	      (
	        ?
	      , ? 
	      )
	</entry>
	
	<entry key="selectNickName">
		SELECT NICKNAME
		  FROM MEMBER
		 WHERE MEM_NO = ?
	</entry>
	
	<entry key="insertReview">
		INSERT
		  INTO REVIEW
		  (
		    REVIEW_NO
		  , REST_NO
		  , REVIEW_CONTENT
		  , RATING
		  , REVIEW_DATE
		  , MEM_NO
		  )
		VALUES
		  (
		    SEQ_REVNO.NEXTVAL
		  , ?
		  , ?
		  , ?
		  , DEFAULT
		  , ?
		  )
	</entry>
	
	<entry key="insertAttachmentList">
	INSERT
		  INTO ATTACHMENT
		  (
		    FILE_NO
		  , REF_BNO
		  , ORIGIN_NAME
		  , CHANGE_NAME
		  , FILE_PATH
		  , UPLOAD_DATE
		  , STATUS
		  , CATEGORY
		  )
		VALUES
		  (
		    SEQ_FNO.NEXTVAL
		  , SEQ_REVNO.CURRVAL
		  , ?
		  , ?
		  , ?
		  , DEFAULT
		  , DEFAULT
		  , ?
		  )
	</entry>
	
	<entry key="selectReviewList">
		SELECT DISTINCT
		       REVIEW_NO
		     , REVIEW_CONTENT
		     , RATING
		     , NICKNAME
		     , MEM_NO
		  FROM REVIEW
		  JOIN MEMBER USING (MEM_NO)
		  LEFT JOIN ATTACHMENT ON (REVIEW_NO = REF_BNO)
		 WHERE REST_NO = ?
		 ORDER
		    BY REVIEW_NO DESC 
	</entry>
	
	<entry key="selectModalReivew">
		SELECT DISTINCT
		       REVIEW_NO
		     , REVIEW_CONTENT
		     , RATING
             , TO_CHAR(REVIEW_DATE, 'YYYY/MM/DD') "REVIEW_DATE"
		     , MEM_NO
             , NICKNAME
		  FROM REVIEW
		  JOIN MEMBER USING (MEM_NO)
		  LEFT JOIN ATTACHMENT ON (REVIEW_NO = REF_BNO)
		 WHERE REST_NO = ?
           AND REVIEW_NO = ?
           AND CATEGORY = 'REV'
		 ORDER
		    BY REVIEW_NO DESC
	</entry>
	
	<entry key="selectReviewNoList">
		SELECT DISTINCT
		       REVIEW_NO
		  FROM REVIEW
		 WHERE REST_NO = ?
		 ORDER
		    BY REVIEW_NO DESC 
	</entry>
	
	<entry key="selectReviewAttachment">
	SELECT
	       '/' || FILE_PATH || '/' || CHANGE_NAME "REVIEWIMGS"
	  FROM ATTACHMENT
      JOIN REVIEW ON (REF_BNO = REVIEW_NO)
	 WHERE REVIEW_NO = ?
	 ORDER
    	BY REF_BNO DESC
	</entry>
	
	<entry key="selectReviewAttachment1">
	SELECT
	       FILE_NO
	     , REF_BNO
	     , ORIGIN_NAME
	     , CHANGE_NAME
	     , FILE_PATH
	  FROM ATTACHMENT
	 WHERE STATUS = 'Y'
	 ORDER
    	BY REF_BNO DESC
	</entry>
	
	<entry  key="selectReviewAttachment2">
	SELECT
	       '/' || FILE_PATH || '/' || CHANGE_NAME "REVIEWIMGS"
           , REVIEW_NO
	  FROM ATTACHMENT
      JOIN REVIEW ON (REF_BNO = REVIEW_NO)
      WHERE CATEGORY = 'REV'
      	AND REST_NO = ?
	 ORDER
    	BY REF_BNO DESC
	</entry>
	
	<entry  key="selectProfileAttachment">
	SELECT
	       '/' || FILE_PATH || '/' || CHANGE_NAME "REVIEWIMGS"
	     , REF_BNO
	  FROM ATTACHMENT
	  JOIN MEMBER ON (REF_BNO = MEM_NO)
	  WHERE CATEGORY = 'PROFILE'
	 ORDER
	    BY REF_BNO DESC
	</entry>
	
	<entry key="selectMemNo">
		SELECT MEM_NO
		  FROM REVIEW
		 WHERE REVIEW_NO = ?
	</entry>
	
	<entry key="selectModalProfile">
		SELECT
	       '/' || '5makase' || '/' || FILE_PATH || '/' || CHANGE_NAME "REVIEWIMGS"
	     , REF_BNO
	  FROM ATTACHMENT
	  JOIN MEMBER ON (REF_BNO = MEM_NO)
	  WHERE CATEGORY = 'PROFILE'
        AND REF_BNO = ?
	 ORDER
	    BY REF_BNO DESC   
	</entry>
	
	<entry key="updateRestaurant">
		INSERT
		  INTO UPDATE_REST
		  (
		    UPDATE_NO
		  , UPDATE_CONTENT
		  , REST_NO
		  , MEM_NO
		  )
		VALUES
		  (
		    SEQ_UNO.NEXTVAL
		  , ?
		  , ?
		  , ?
		  )
	</entry>
	
	<entry key="insertReport">
		INSERT
		  INTO REPORT
		  (
		    REPORT_NO
		  , REPORTER
		  , SUSPECT
		  , REPORT_CONTENT
		  , RESULT
		  )
		VALUES
		  (
		    SEQ_REPNO.NEXTVAL
		  , ?
		  , ?
		  , ?
		  , NULL
		  )
	</entry>
	
	<!-- 관우님 mapper 시작-->
	
	<entry key="selectSearchRest">
	SELECT 
            R.REST_NO AS REST_NO
           ,R.CATEGORY_NO AS CATEGORY_NO
           ,R.TV_NO AS TV_NO
           ,T.TV_NAME AS TV_NAME
           ,R.REST_NAME AS REST_NAME
           ,R.REST_ADDRESS AS REST_ADDRESS
           ,R.REST_PHONE AS REST_PHONE
           ,R.PARKING AS PARKING
           ,R.INTRO AS INTRO
           ,R.REST_VIEWS AS REST_VIEWS
           ,R.STATUS AS STATUS
           ,C.CATEGORY_NAME AS CATEGORY_NAME
           ,NVL(AVG(RATING),0) AS AVG
           ,NVL(COUNT(REVIEW_NO),0) AS COUNT
           ,NVL(COUNT(F.REST_NO),0) AS FCOUNT
           ,AT.FILE_PATH || '/' || AT.CHANGE_NAME AS TITLE_IMG
	   FROM RESTAURANT R
       LEFT OUTER JOIN REVIEW V ON R.REST_NO = V.REST_NO
       LEFT OUTER JOIN FAVORITES F ON R.REST_NO = F.REST_NO
       JOIN FOOD_CATEGORY C ON R.CATEGORY_NO = C.CATEGORY_NO
       LEFT OUTER JOIN TV T ON R.TV_NO = T.TV_NO
       LEFT OUTER JOIN ATTACHMENT AT ON R.REST_NO = AT.REF_BNO
	  WHERE (REST_NAME LIKE ? OR REST_ADDRESS LIKE ?)
	  AND R.STATUS = 'Y'
	  AND AT.FILE_LEVEL = 2
      GROUP BY 
      		 R.REST_NO
           ,R.CATEGORY_NO
           ,R.TV_NO
           ,T.TV_NAME
           ,R.REST_NAME
           ,R.REST_ADDRESS
           ,R.REST_PHONE
           ,R.PARKING
           ,R.INTRO
           ,R.REST_VIEWS
           ,R.STATUS
           ,C.CATEGORY_NAME
           ,AT.FILE_PATH || '/' || AT.CHANGE_NAME
</entry>

<entry key="ratingList">
	 SELECT 
            R.REST_NO AS REST_NO
           ,R.CATEGORY_NO AS CATEGORY_NO
           ,R.TV_NO AS TV_NO
           ,T.TV_NAME AS TV_NAME
           ,R.REST_NAME AS REST_NAME
           ,R.REST_ADDRESS AS REST_ADDRESS
           ,R.REST_PHONE AS REST_PHONE
           ,R.PARKING AS PARKING
           ,R.INTRO AS INTRO
           ,R.REST_VIEWS AS REST_VIEWS
           ,R.STATUS AS STATUS
           ,C.CATEGORY_NAME AS CATEGORY_NAME
           ,NVL(AVG(RATING),0) AS AVG
           ,NVL(COUNT(REVIEW_NO),0) AS COUNT
           ,NVL(COUNT(F.REST_NO),0) AS FCOUNT
	   FROM RESTAURANT R
       LEFT OUTER JOIN REVIEW V ON R.REST_NO = V.REST_NO
       LEFT OUTER JOIN FAVORITES F ON R.REST_NO = F.REST_NO
       JOIN FOOD_CATEGORY C ON R.CATEGORY_NO = C.CATEGORY_NO
       LEFT OUTER JOIN TV T ON R.TV_NO = T.TV_NO
	  WHERE REST_NAME LIKE ?
	  OR REST_ADDRESS LIKE ?
	  AND STATUS = 'Y'
      GROUP BY 
      		 R.REST_NO
           ,R.CATEGORY_NO
           ,R.TV_NO
           ,T.TV_NAME
           ,R.REST_NAME
           ,R.REST_ADDRESS
           ,R.REST_PHONE
           ,R.PARKING
           ,R.INTRO
           ,R.REST_VIEWS
           ,R.STATUS
           ,C.CATEGORY_NAME
      ORDER BY AVG DESC  
</entry>

<entry key="viewList">
	 SELECT 
            R.REST_NO AS REST_NO
           ,R.CATEGORY_NO AS CATEGORY_NO
           ,R.TV_NO AS TV_NO
           ,T.TV_NAME AS TV_NAME
           ,R.REST_NAME AS REST_NAME
           ,R.REST_ADDRESS AS REST_ADDRESS
           ,R.REST_PHONE AS REST_PHONE
           ,R.PARKING AS PARKING
           ,R.INTRO AS INTRO
           ,R.REST_VIEWS AS REST_VIEWS
           ,R.STATUS AS STATUS
           ,C.CATEGORY_NAME AS CATEGORY_NAME
           ,NVL(AVG(RATING),0) AS AVG
           ,NVL(COUNT(REVIEW_NO),0) AS COUNT
           ,NVL(COUNT(F.REST_NO),0) AS FCOUNT
	   FROM RESTAURANT R
       LEFT OUTER JOIN REVIEW V ON R.REST_NO = V.REST_NO
       LEFT OUTER JOIN FAVORITES F ON R.REST_NO = F.REST_NO
       JOIN FOOD_CATEGORY C ON R.CATEGORY_NO = C.CATEGORY_NO
       LEFT OUTER JOIN TV T ON R.TV_NO = T.TV_NO
	  WHERE REST_NAME LIKE ?
	  OR REST_ADDRESS LIKE ?
	  AND STATUS = 'Y'
      GROUP BY 
      		 R.REST_NO
           ,R.CATEGORY_NO
           ,R.TV_NO
           ,T.TV_NAME
           ,R.REST_NAME
           ,R.REST_ADDRESS
           ,R.REST_PHONE
           ,R.PARKING
           ,R.INTRO
           ,R.REST_VIEWS
           ,R.STATUS
           ,C.CATEGORY_NAME
      ORDER BY REST_VIEWS DESC  
</entry>

<entry key="selectCategory">
    SELECT
    	R.REST_NO AS REST_NO
	   ,R.CATEGORY_NO AS CATEGORY_NO
	   ,R.TV_NO AS TV_NO
       ,T.TV_NAME AS TV_NAME
	   ,R.REST_NAME AS REST_NAME
	   ,R.REST_ADDRESS AS REST_ADDRESS
	   ,R.REST_PHONE AS REST_PHONE
	   ,R.PARKING AS PARKING
	   ,R.INTRO AS INTRO
	   ,R.REST_VIEWS AS REST_VIEWS
	   ,R.STATUS AS STATUS
	   ,C.CATEGORY_NAME AS CATEGORY_NAME
	   ,NVL(AVG(RATING),0) AS AVG
	   ,NVL(COUNT(REVIEW_NO),0) AS COUNT
	   ,COUNT(F.REST_NO) AS FCOUNT
	 FROM RESTAURANT R
	 LEFT OUTER JOIN REVIEW V ON R.REST_NO = V.REST_NO
     LEFT OUTER JOIN TV T ON R.TV_NO = T.TV_NO
     LEFT OUTER JOIN FAVORITES F ON R.REST_NO = F.REST_NO
	 JOIN FOOD_CATEGORY C ON R.CATEGORY_NO = C.CATEGORY_NO
   WHERE R.CATEGORY_NO = ?
   AND STATUS ='Y'
 GROUP BY
 		R.REST_NO
	   ,R.CATEGORY_NO
	   ,R.TV_NO
       ,T.TV_NAME
	   ,R.REST_NAME
	   ,R.REST_ADDRESS
	   ,R.REST_PHONE
	   ,R.PARKING
	   ,R.INTRO
	   ,R.REST_VIEWS
	   ,R.STATUS
	   ,C.CATEGORY_NAME
</entry>

<entry key="selectFavoritList">
		 	 SELECT 
            r.REST_NO AS rest_no
           ,r.CATEGORY_NO as category_no
           ,r.TV_NO as tv_no
           ,t.TV_NAME as tv_name
           ,r.REST_NAME as rest_name
           ,r.REST_ADDRESS as rest_address
           ,r.REST_PHONE as rest_phone
           ,r.PARKING as parking
           ,r.INTRO as intro
           ,r.REST_VIEWS as rest_views
           ,r.STATUS as status
           ,c.CATEGORY_NAME as category_name
           ,NVL(AVG(v.RATING),0) AS AVG
           ,NVL(COUNT(v.REVIEW_NO),0) AS COUNT
           ,count(f.rest_no) as count1
	   FROM RESTAURANT r
       LEFT JOIN TV T ON(R.TV_NO = T.TV_NO)
       LEFT OUTER JOIN REVIEW v on(r.REST_NO = v.rest_no)  
       JOIN FOOD_CATEGORY c on (r.category_no = c.CATEGORY_NO)
       left join favorites f on(f.rest_no = r.rest_no)
	  WHERE REST_NAME  like ?
	  OR REST_ADDRESS LIKE ?
	  AND STATUS = 'Y'
      GROUP BY 
      		 r.REST_NO
           ,r.CATEGORY_NO
           ,r.TV_NO
           ,T.TV_NAME
           ,r.REST_NAME
           ,r.REST_ADDRESS
           ,r.REST_PHONE
           ,r.PARKING
           ,r.INTRO
           ,r.REST_VIEWS
           ,r.STATUS
           ,c.CATEGORY_NAME
        order by count1 desc
</entry>

<entry key="selectOptionList">
	SELECT 
     R.REST_NO AS REST_NO
    ,R.CATEGORY_NO AS CATEGORY_NO
    ,R.TV_NO AS TV_NO
    ,T.TV_NAME AS TV_NAME
    ,R.REST_NAME AS REST_NAME
    ,R.REST_ADDRESS AS REST_ADDRESS
    ,R.REST_PHONE AS REST_PHONE
    ,R.PARKING AS PARKING
    ,R.INTRO AS INTRO
    ,R.REST_VIEWS AS REST_VIEWS
    ,R.STATUS AS STATUS
    ,C.CATEGORY_NAME AS CATEGORY_NAME
    ,NVL(AVG(V.RATING),0) AS AVG
    ,NVL(COUNT(V.REVIEW_NO),0) AS COUNT
    ,COUNT(F.REST_NO) AS FCOUNT
  FROM RESTAURANT R
  LEFT OUTER JOIN TV T ON R.TV_NO = T.TV_NO 
  LEFT OUTER JOIN REVIEW V ON R.REST_NO = V.REST_NO
  LEFT OUTER JOIN MEMBER M ON V.MEM_NO = M.MEM_NO
  JOIN FOOD_CATEGORY C ON R.CATEGORY_NO = C.CATEGORY_NO
  JOIN FAVORITES F ON R.REST_NO = F.REST_NO
  WHERE ((R.REST_NAME LIKE ? OR R.REST_ADDRESS LIKE ?) AND ((R.REST_NAME LIKE ?)) OR (R.REST_ADDRESS LIKE ?))
  AND R.CATEGORY_NO = ?
  AND R.TV_NO = ?
  GROUP BY 
         R.REST_NO
        ,R.CATEGORY_NO
        ,R.TV_NO
        ,T.TV_NAME
        ,R.REST_NAME
        ,R.REST_ADDRESS
        ,R.REST_PHONE
        ,R.PARKING
        ,R.INTRO
        ,R.REST_VIEWS
        ,R.STATUS
        ,C.CATEGORY_NAME
        <![CDATA[
         HAVING ((SUM(M.AGE)/COUNT(M.AGE)) >= ? AND (SUM(M.AGE)/COUNT(M.AGE)) <= ?)
          ]]>
</entry>

<entry key="insertRestTemp">
	INSERT
	  INTO RESTAURANT_TEMP
	  	 (
	  	  RTEMP_NO
	  	 ,RTEMP_NAME
	  	 ,RTEMP_INFO
	  	 )
	  	 VALUES
	  	 (
	  	  SEQ_RTEMPNO.NEXTVAL
	  	 ,?
	  	 ,?
	  	 )
</entry>

<entry key="insertAttachment">
	INSERT
	  INTO ATTACHMENT
	     (
	     	FILE_NO
	       ,REF_BNO
	       ,ORIGIN_NAME
	       ,CHANGE_NAME
	       ,FILE_PATH	
	       ,UPLOAD_DATE
	       ,STATUS
	       ,CATEGORY
	     )
	VALUES
	     (
	    	SEQ_FNO.NEXTVAL
	       ,SEQ_RTEMPNO.CURRVAL
           ,?
           ,?
           ,?
           ,DEFAULT
           ,'Y'
           ,'RTEMP'
	     )
</entry>

<entry key="selectRestThumbnail">
  select file_path || '/' || change_name "fileName" from attachment 
  where ref_bno = ?
  and file_level = 2
</entry>

<entry key="selectRestAttachment">
	SELECT 
			*
	  FROM ATTACHMENT
	 WHERE FILE_LEVEL = 2
</entry>
	
</properties>